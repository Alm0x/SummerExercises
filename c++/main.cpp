#include <iostream>
// #include "optimization.h"

using namespace std;

/*
    Привет! В этом файле находится несколько заданий, которые проверят, что всё работает как надо, будет
    несколько советов по cin и cout, научитесь пользоваться быстрым вводом-выводом Серёжи.
    Желательно уже знать базовый синтаксис C++.

    Для начала очередного задания укажите его номер (1-7) в #define ниже, сейчас там указано первое задание.
    Смотрите код между "#ifdef TASK_X" и "#endif  // TASK_X", где X - выбранное задание.
*/

#define TASK_1

int main() {
    #ifdef TASK_1
        // Проверим, что работает ввод и вывод в консоль
        cout << "Enter your name\n" ;
        string name;
        cin >> name;
        cout << "Hi, " + name + "!";
    #endif  // TASK_1

    #ifdef TASK_2
        // Давайте сделаем тоже самое через файлы
        // Самый простой способ работать с файлами - привязать их к cin и cout
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
        // Создайте input.txt в папке, куда собирается ваш проект. У CLion это cmake-build-debug
        // впишите туда своё имя
        cout << "Enter your name\n";
        string name;
        cin >> name;
        cout << "Hi, " + name + "!";
        // Проверьте, что у вас появился output.txt с необходимым сообщением.
    #endif  // TASK_2

    #ifdef TASK_3
       // Проверим, что у вас работает C++11.
       // Запустите код, если на экран вывелись числа от 1 до 5, то всё ок, иначе читайте комментарии ниже.
       vector<int> v = {1, 2, 3, 4, 5};
       for (auto x : v) {
           cout << x << ' ';
       }
       // Читайте это, если возникли ошибки компиляции.

       // Если вы работаете в CLion, выберите в меню слева CMakeLists.txt,
       // Найдите строчку "set(CMAKE_CXX_STANDARD.." Проверьте, что там написано хотя бы "set(CMAKE_CXX_STANDARD 11)" или больше.
       // Если такой строчки нет - допишите её.

       // Если вы пишете в codeblocks, перейдите Toolbar -> Settings -> Compiler. У вас откроется вкладка compiler flags,
       // Поставьте в разделе General флажок у "Have g++ follow the C++11 ISO C++  language standard [-std=c++11]" (или больше)

       // Если вы пишете в текстовом редакторе, при компиляции используйте флаг -std=c++11.
    #endif  // TASK_3

    #ifdef TASK_4
        // Поговорим об оптимизациях ввода и вывода.
        // Первый вариант ускорить их это использовать printf/scanf вместо cout/cin
        // Можете почитать об этом в интернете, я же расскажу как разогнать cin и cout.
        // Во-первых, в самое начало вашей программы (сразу внутри main) дописывайте эти две строчки
        ios_base::sync_with_stdio(false);
        cin.tie(0);
        // Если кратко, они отключают синхронизацию между printf/scanf и cout/cin, что значительно ускоряет вашу программу.

        // Во-вторых, если вы захотите вывести перенос строки, не используйте endl, только '\n'.
        cout << endl; // Медленно
        cout << '\n'; // Быстро
        // Почему так происходит? В целях оптимизации C++ выводит данные не сразу, а накапливает их в буфер,
        // а затем уже большим куском отправляет на вывод.
        // endl кроме переноса строки сбрасывает этот самый буфер, что сильно тормозит программу.
        // Он пригодится вам в интерактивных задачах, но обычно не нужен.
    #endif  // TASK_4

    #ifdef TASK_5
        // Продолжим оптимизировать ввод и вывод. С TL в 0.1 секунду (а у вас такое будет :))
        // нужно уметь считывать данные быстрее. Когда способов выше не хватает, приходит на помощь быстрый ввод-вывод Серёжи.
        // Если вы скачивали репозиторий с github, то optimization.h уже лежит рядом с main.cpp.
        // В таком случае раскомментируйте третью строчку данного файла.

        // Данный способ ввода-вывода до последнего ждёт входные данные,
        // поэтому если вы вводите данные через консоль, то, возможно,
        // в конце ввода вам нужно будет нажать Ctrl + D или Ctrl + Z.
        // К сожалению, в CLion до сих пор есть баг, и Ctrl + D не работает.
        // Чтобы пофиксить это, перейдите Navigate->Search Everywhere, наберите Registry, выберите его
        // Найдите run.processes.with.pty (скорее всего будет первым), снимите галочку.

        // Научимся быстро считывать и выводить числа
        int x = readInt();
        writeInt(x + 42);
        // Перенесём строчку
        writeChar('\n');

        // Кстати, никогда не смешивайте cin с вводом Серёжи, а cout - с выводом. Это приводит к большим проблемам.

        // Если вы хотите считать(вывести) long long, то пишите
        long long y = readInt<long long>();
        writeInt<long long>(y, '\n');
        // Тут я перенёс строчку указав вторым параметром символ переноса строки.
        // Он выведется сразу после числа.

        // Запустите программу, введите 2 числа, нажмите Ctrl+D или Ctrl+Z.

        // В тестирующей системе файлику optimization.h взяться неоткуда.
        // Поэтому вы либо копируете его содержимое в самое начало main перед отправкой,
        // либо посылаете под компилятором с "inc" на конце. Там он есть.
    #endif  // TASK_5

    #ifdef TASK_6
        // Это задание научит вас читать и выводить строки быстро
        // Дело в том, что функции readWord/readLine и writeWord принимают сишные строки, а не плюсовые.
        // Для чтения: выделяем буфер необходимого размера.
        char buf[10];
        // Это на 1 больше размера того, что собираетесь считать, чтобы поместился стоп-символ (так устроены сишные строки)
        // Читаем. В данном случае предполагаем, что на вход поступит не больше 9 символов.
        readWord(buf);
        // Преобразуем в строку C++
        string str = buf;
        // Выведем, преобразовав плюсовую строку к сишной.
        writeWord(str.c_str());
    #endif  // TASK_6

    #ifdef TASK_7
        // Если вы дошли до сюда, отпишитесь в личку, интересна статистика)
        // Задание на случай если хочется проверить оптимизации выше.

        // Сгенерируйте 10^7 рандомных чисел (rand()), запишите их в файл через перенос строки.
        // Сделайте сначала это через обычный cout без двух вошлебных строчек с ios_base и через endl
        // Это будет долго) Если надоело ждать, остановите программу кнопочкой (рядом или вместо запуска) или Ctrl+C (если консоль)
        // Затем добавьте строчки про ios_base и cin, используйте '\n' вместо endl
        // Затем замените вывод на вывод Серёжи, строчки с ios_base и cin.tie можете убрать
        // Посмотрите на разницу во времени
    #endif  // TASK_7

    return 0;
}
